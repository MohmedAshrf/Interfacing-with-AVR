
Interrupt1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000286  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000286  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a5f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002b3  00000000  00000000  00000abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000124  00000000  00000000  00000d71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000300  00000000  00000000  00000e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000fb  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c4  00000000  00000000  0000135f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001523  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__vector_1>
   6:	00 00       	nop
   8:	de c0       	rjmp	.+444    	; 0x1c6 <__vector_2>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	f3 c0       	rjmp	.+486    	; 0x282 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include "util/delay.h"
#include <avr/interrupt.h>

int main(void)
{
	sei(); // enable the global interrupt.//SREG |= (1<<SRE); // enable the global interrupt.
  9e:	78 94       	sei

	DDRF |= (1<<PF1); // make PF1 as an output.
  a0:	e1 e6       	ldi	r30, 0x61	; 97
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	80 83       	st	Z, r24
	PORTF |= (1<<PF1); //Enable the LEDs by make PF1 high.
  aa:	e2 e6       	ldi	r30, 0x62	; 98
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
	
	DDRA = 0xFF; //make all LEDs as an output.
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a bb       	out	0x1a, r24	; 26
	PORTA |= 0x00; // close all LEDs.
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	8b bb       	out	0x1b, r24	; 27
	
	DDRD &= ~ 0x03; // make PD0 and PD1 as Inputs.
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	8c 7f       	andi	r24, 0xFC	; 252
  c0:	81 bb       	out	0x11, r24	; 17
	PORTD |=(1<<PD0); //pull up resistor to PD0.
  c2:	90 9a       	sbi	0x12, 0	; 18
	PORTD |=(1<<PD1); //pull up resistor to PD1.
  c4:	91 9a       	sbi	0x12, 1	; 18
	
	EIMSK |= (1<<INT0); //make PD0 an interrupt.
  c6:	89 b7       	in	r24, 0x39	; 57
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	89 bf       	out	0x39, r24	; 57
	EIMSK |= (1<<INT1); //make PD1 an interrupt.
  cc:	89 b7       	in	r24, 0x39	; 57
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	89 bf       	out	0x39, r24	; 57
	EICRA |= 0x00;		 //make INT0 and INT1 as interrupt at the falling edge. (1010)
  d2:	ea e6       	ldi	r30, 0x6A	; 106
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 83       	st	Z, r24
	
	while(1)
	{
		_delay_ms(100);
		PORTA |= 0xff; // open all LEDs.
  da:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	30 e7       	ldi	r19, 0x70	; 112
  e0:	92 e0       	ldi	r25, 0x02	; 2
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	30 40       	sbci	r19, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x44>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x4e>
  ec:	00 00       	nop
  ee:	9b b3       	in	r25, 0x1b	; 27
  f0:	8b bb       	out	0x1b, r24	; 27
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	30 e7       	ldi	r19, 0x70	; 112
  f6:	92 e0       	ldi	r25, 0x02	; 2
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	30 40       	sbci	r19, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x5a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x64>
 102:	00 00       	nop
 104:	eb cf       	rjmp	.-42     	; 0xdc <main+0x3e>

00000106 <__vector_1>:
		_delay_ms(100);
	}
}
ISR(INT0_vect){
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	0b b6       	in	r0, 0x3b	; 59
 112:	0f 92       	push	r0
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
	int i;
	PORTA &= ~ 0xff;		  //set all LEDs to be off.
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	1b ba       	out	0x1b, r1	; 27
	for(i =0;i<=5;i++ ){
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
		PORTA |= (1<<i);      //set the current LED to be on.
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	2b b3       	in	r18, 0x1b	; 27
 138:	ab 01       	movw	r20, r22
 13a:	08 2e       	mov	r0, r24
 13c:	02 c0       	rjmp	.+4      	; 0x142 <__vector_1+0x3c>
 13e:	44 0f       	add	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <__vector_1+0x38>
 146:	24 2b       	or	r18, r20
 148:	2b bb       	out	0x1b, r18	; 27
		PORTA |= (1<<(i+2));  //set the current+2 LED to be on.
 14a:	5b b3       	in	r21, 0x1b	; 27
		_delay_ms(100);
		PORTA |= 0xff; // open all LEDs.
		_delay_ms(100);
	}
}
ISR(INT0_vect){
 14c:	9c 01       	movw	r18, r24
 14e:	2e 5f       	subi	r18, 0xFE	; 254
 150:	3f 4f       	sbci	r19, 0xFF	; 255
	int i;
	PORTA &= ~ 0xff;		  //set all LEDs to be off.
	for(i =0;i<=5;i++ ){
		PORTA |= (1<<i);      //set the current LED to be on.
		PORTA |= (1<<(i+2));  //set the current+2 LED to be on.
 152:	fb 01       	movw	r30, r22
 154:	02 c0       	rjmp	.+4      	; 0x15a <__vector_1+0x54>
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	2a 95       	dec	r18
 15c:	e2 f7       	brpl	.-8      	; 0x156 <__vector_1+0x50>
 15e:	9f 01       	movw	r18, r30
 160:	35 2f       	mov	r19, r21
 162:	32 2b       	or	r19, r18
 164:	3b bb       	out	0x1b, r19	; 27
 166:	ff ef       	ldi	r31, 0xFF	; 255
 168:	a0 e7       	ldi	r26, 0x70	; 112
 16a:	e2 e0       	ldi	r30, 0x02	; 2
 16c:	f1 50       	subi	r31, 0x01	; 1
 16e:	a0 40       	sbci	r26, 0x00	; 0
 170:	e0 40       	sbci	r30, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <__vector_1+0x66>
 174:	00 c0       	rjmp	.+0      	; 0x176 <__vector_1+0x70>
 176:	00 00       	nop
		_delay_ms(100);
		PORTA &= ~(1<<i);	  //set the current LED to be off.
 178:	3b b3       	in	r19, 0x1b	; 27
 17a:	40 95       	com	r20
 17c:	43 23       	and	r20, r19
 17e:	4b bb       	out	0x1b, r20	; 27
		PORTA &= ~(1<<(i+2)); //set the current+2 LED to be off.
 180:	3b b3       	in	r19, 0x1b	; 27
 182:	20 95       	com	r18
 184:	23 23       	and	r18, r19
 186:	2b bb       	out	0x1b, r18	; 27
 188:	ff ef       	ldi	r31, 0xFF	; 255
 18a:	20 e7       	ldi	r18, 0x70	; 112
 18c:	32 e0       	ldi	r19, 0x02	; 2
 18e:	f1 50       	subi	r31, 0x01	; 1
 190:	20 40       	sbci	r18, 0x00	; 0
 192:	30 40       	sbci	r19, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <__vector_1+0x88>
 196:	00 c0       	rjmp	.+0      	; 0x198 <__vector_1+0x92>
 198:	00 00       	nop
	}
}
ISR(INT0_vect){
	int i;
	PORTA &= ~ 0xff;		  //set all LEDs to be off.
	for(i =0;i<=5;i++ ){
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	86 30       	cpi	r24, 0x06	; 6
 19e:	91 05       	cpc	r25, r1
 1a0:	51 f6       	brne	.-108    	; 0x136 <__vector_1+0x30>
		_delay_ms(100);
		PORTA &= ~(1<<i);	  //set the current LED to be off.
		PORTA &= ~(1<<(i+2)); //set the current+2 LED to be off.
		_delay_ms(100);
	}
}
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0b be       	out	0x3b, r0	; 59
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_2>:
ISR(INT1_vect){
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	0b b6       	in	r0, 0x3b	; 59
 1d2:	0f 92       	push	r0
 1d4:	2f 93       	push	r18
 1d6:	3f 93       	push	r19
 1d8:	4f 93       	push	r20
 1da:	5f 93       	push	r21
 1dc:	6f 93       	push	r22
 1de:	7f 93       	push	r23
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	af 93       	push	r26
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	int i;
	PORTA &= ~ 0xff;		  //set all LEDs to be off.
 1ea:	8b b3       	in	r24, 0x1b	; 27
 1ec:	1b ba       	out	0x1b, r1	; 27
	for(i =5;i>=0;i-- ){
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	90 e0       	ldi	r25, 0x00	; 0
		PORTA |= (1<<i);      //set the current LED to be on.
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	2b b3       	in	r18, 0x1b	; 27
 1f8:	ab 01       	movw	r20, r22
 1fa:	08 2e       	mov	r0, r24
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <__vector_2+0x3c>
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <__vector_2+0x38>
 206:	24 2b       	or	r18, r20
 208:	2b bb       	out	0x1b, r18	; 27
		PORTA |= (1<<(i+2));  //set the current+2 LED to be on.
 20a:	5b b3       	in	r21, 0x1b	; 27
		PORTA &= ~(1<<i);	  //set the current LED to be off.
		PORTA &= ~(1<<(i+2)); //set the current+2 LED to be off.
		_delay_ms(100);
	}
}
ISR(INT1_vect){
 20c:	9c 01       	movw	r18, r24
 20e:	2e 5f       	subi	r18, 0xFE	; 254
 210:	3f 4f       	sbci	r19, 0xFF	; 255
	int i;
	PORTA &= ~ 0xff;		  //set all LEDs to be off.
	for(i =5;i>=0;i-- ){
		PORTA |= (1<<i);      //set the current LED to be on.
		PORTA |= (1<<(i+2));  //set the current+2 LED to be on.
 212:	fb 01       	movw	r30, r22
 214:	02 c0       	rjmp	.+4      	; 0x21a <__vector_2+0x54>
 216:	ee 0f       	add	r30, r30
 218:	ff 1f       	adc	r31, r31
 21a:	2a 95       	dec	r18
 21c:	e2 f7       	brpl	.-8      	; 0x216 <__vector_2+0x50>
 21e:	9f 01       	movw	r18, r30
 220:	35 2f       	mov	r19, r21
 222:	32 2b       	or	r19, r18
 224:	3b bb       	out	0x1b, r19	; 27
 226:	ff ef       	ldi	r31, 0xFF	; 255
 228:	a0 e7       	ldi	r26, 0x70	; 112
 22a:	e2 e0       	ldi	r30, 0x02	; 2
 22c:	f1 50       	subi	r31, 0x01	; 1
 22e:	a0 40       	sbci	r26, 0x00	; 0
 230:	e0 40       	sbci	r30, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <__vector_2+0x66>
 234:	00 c0       	rjmp	.+0      	; 0x236 <__vector_2+0x70>
 236:	00 00       	nop
		_delay_ms(100);
		PORTA &= ~(1<<i);	  //set the current LED to be off.
 238:	3b b3       	in	r19, 0x1b	; 27
 23a:	40 95       	com	r20
 23c:	43 23       	and	r20, r19
 23e:	4b bb       	out	0x1b, r20	; 27
		PORTA &= ~(1<<(i+2)); //set the current+2 LED to be off.
 240:	3b b3       	in	r19, 0x1b	; 27
 242:	20 95       	com	r18
 244:	23 23       	and	r18, r19
 246:	2b bb       	out	0x1b, r18	; 27
 248:	ff ef       	ldi	r31, 0xFF	; 255
 24a:	20 e7       	ldi	r18, 0x70	; 112
 24c:	32 e0       	ldi	r19, 0x02	; 2
 24e:	f1 50       	subi	r31, 0x01	; 1
 250:	20 40       	sbci	r18, 0x00	; 0
 252:	30 40       	sbci	r19, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <__vector_2+0x88>
 256:	00 c0       	rjmp	.+0      	; 0x258 <__vector_2+0x92>
 258:	00 00       	nop
	}
}
ISR(INT1_vect){
	int i;
	PORTA &= ~ 0xff;		  //set all LEDs to be off.
	for(i =5;i>=0;i-- ){
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	60 f6       	brcc	.-104    	; 0x1f6 <__vector_2+0x30>
		_delay_ms(100);
		PORTA &= ~(1<<i);	  //set the current LED to be off.
		PORTA &= ~(1<<(i+2)); //set the current+2 LED to be off.
		_delay_ms(100);
	}
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0b be       	out	0x3b, r0	; 59
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
