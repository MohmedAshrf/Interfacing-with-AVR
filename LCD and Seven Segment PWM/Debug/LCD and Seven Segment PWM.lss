
LCD and Seven Segment PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000004ba  0000052e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000033e4  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b6c  00000000  00000000  0000392c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00004498  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000044c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a6d  00000000  00000000  00004587  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003c1  00000000  00000000  00004ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009fc  00000000  00000000  000053b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00005db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000223  00000000  00000000  00005fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077a  00000000  00000000  000061c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000693d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea eb       	ldi	r30, 0xBA	; 186
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e1       	ldi	r26, 0x1A	; 26
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	f8 c1       	rjmp	.+1008   	; 0x4b6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include "lcd.h"
volatile int count=0; //volatile because this variable is transfered between multiple functions.

int main(void)
{
	sei();	//SREG |= (1<<8);
  c8:	78 94       	sei
	//enable the global interrupt.
	
	//ADMUX |= (1<<REFS0); // Internal 2.56V Voltage Reference with external capacitor at AREF pin
	ADMUX |= (1<<REFS1); // AVCC with external capacitor at AREF pin
  ca:	3f 9a       	sbi	0x07, 7	; 7
	ADMUX |= (1<<ADLAR); // 1 :- MSB at ADCH
  cc:	3d 9a       	sbi	0x07, 5	; 7
	// default selecting AD0
	
	ADCSRA |= (1<<ADEN); // Enable ADC
  ce:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADSC); // Start convention (Just one time and then it goes low)
  d0:	36 9a       	sbi	0x06, 6	; 6
	ADCSRA |= (1<<ADFR); // continue conventionalizing (set ADSC to be high again )
  d2:	35 9a       	sbi	0x06, 5	; 6
	
	
	DDRB |= (1<<PB4);  //make LED D10 as an output.
  d4:	bc 9a       	sbi	0x17, 4	; 23
	PORTB |= (1<<PB4); //make LED D10 on.
  d6:	c4 9a       	sbi	0x18, 4	; 24

	TCCR0 |= (1<<CS01);  //Timer/Counter Control Register first 3 bits are re-scaler 010 -> /8
  d8:	83 b7       	in	r24, 0x33	; 51
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<WGM01); //PWM
  de:	83 b7       	in	r24, 0x33	; 51
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	83 bf       	out	0x33, r24	; 51
	TCCR0 |=(1<<WGM00); // enable fast PWM //pin3 (Fast PWM)
  e4:	83 b7       	in	r24, 0x33	; 51
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM01); //clear on compare match State.
  ea:	83 b7       	in	r24, 0x33	; 51
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	83 bf       	out	0x33, r24	; 51
	
	PORTE |= (1<<PE4);
  f0:	1c 9a       	sbi	0x03, 4	; 3
	
	//OCR0 = ADCH;			 //Output Compare Match.PB4
	Segment_Init();
  f2:	96 d1       	rcall	.+812    	; 0x420 <Segment_Init>
	LCD_Init();
  f4:	47 d1       	rcall	.+654    	; 0x384 <LCD_Init>
	char a;
	char b;
	char c;
	LCD_DispStringXY(1,1,"Intensity is:");
  f6:	4b e0       	ldi	r20, 0x0B	; 11
  f8:	51 e0       	ldi	r21, 0x01	; 1
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	87 d1       	rcall	.+782    	; 0x40e <LCD_DispStringXY>
	
	while(1)
	{
		for(int i=0;i<256;i++){
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	d0 e0       	ldi	r29, 0x00	; 0
			OCR0 = i;
			Segment_DisplayDigit(3,OCR0%10);
 104:	0f 2e       	mov	r0, r31
 106:	fd ec       	ldi	r31, 0xCD	; 205
 108:	df 2e       	mov	r13, r31
 10a:	f0 2d       	mov	r31, r0
			Segment_DisplayDigit(2,(OCR0/10)%10);
			Segment_DisplayDigit(1,OCR0/100);
 10c:	0f 2e       	mov	r0, r31
 10e:	f9 e2       	ldi	r31, 0x29	; 41
 110:	bf 2e       	mov	r11, r31
 112:	f0 2d       	mov	r31, r0
	char c;
	LCD_DispStringXY(1,1,"Intensity is:");
	
	while(1)
	{
		for(int i=0;i<256;i++){
 114:	00 e0       	ldi	r16, 0x00	; 0
 116:	11 e0       	ldi	r17, 0x01	; 1
 118:	e1 2c       	mov	r14, r1
 11a:	f1 2c       	mov	r15, r1
 11c:	62 c0       	rjmp	.+196    	; 0x1e2 <main+0x11a>
			OCR0 = i;
 11e:	c1 bf       	out	0x31, r28	; 49
			Segment_DisplayDigit(3,OCR0%10);
 120:	61 b7       	in	r22, 0x31	; 49
 122:	6d 9d       	mul	r22, r13
 124:	81 2d       	mov	r24, r1
 126:	11 24       	eor	r1, r1
 128:	86 95       	lsr	r24
 12a:	86 95       	lsr	r24
 12c:	86 95       	lsr	r24
 12e:	88 0f       	add	r24, r24
 130:	98 2f       	mov	r25, r24
 132:	99 0f       	add	r25, r25
 134:	99 0f       	add	r25, r25
 136:	89 0f       	add	r24, r25
 138:	68 1b       	sub	r22, r24
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	81 d1       	rcall	.+770    	; 0x440 <Segment_DisplayDigit>
			Segment_DisplayDigit(2,(OCR0/10)%10);
 13e:	61 b7       	in	r22, 0x31	; 49
 140:	6d 9d       	mul	r22, r13
 142:	61 2d       	mov	r22, r1
 144:	11 24       	eor	r1, r1
 146:	66 95       	lsr	r22
 148:	66 95       	lsr	r22
 14a:	66 95       	lsr	r22
 14c:	6d 9d       	mul	r22, r13
 14e:	81 2d       	mov	r24, r1
 150:	11 24       	eor	r1, r1
 152:	86 95       	lsr	r24
 154:	86 95       	lsr	r24
 156:	86 95       	lsr	r24
 158:	88 0f       	add	r24, r24
 15a:	98 2f       	mov	r25, r24
 15c:	99 0f       	add	r25, r25
 15e:	99 0f       	add	r25, r25
 160:	89 0f       	add	r24, r25
 162:	68 1b       	sub	r22, r24
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	6c d1       	rcall	.+728    	; 0x440 <Segment_DisplayDigit>
			Segment_DisplayDigit(1,OCR0/100);
 168:	61 b7       	in	r22, 0x31	; 49
 16a:	6b 9d       	mul	r22, r11
 16c:	61 2d       	mov	r22, r1
 16e:	11 24       	eor	r1, r1
 170:	62 95       	swap	r22
 172:	6f 70       	andi	r22, 0x0F	; 15
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	64 d1       	rcall	.+712    	; 0x440 <Segment_DisplayDigit>
			a=(OCR0/100)+0x30;
 178:	41 b7       	in	r20, 0x31	; 49
			b=((OCR0/10)%10)+0x30;
 17a:	a1 b6       	in	r10, 0x31	; 49
			c=(OCR0%10)+0x30;
 17c:	c1 b6       	in	r12, 0x31	; 49
		for(int i=0;i<256;i++){
			OCR0 = i;
			Segment_DisplayDigit(3,OCR0%10);
			Segment_DisplayDigit(2,(OCR0/10)%10);
			Segment_DisplayDigit(1,OCR0/100);
			a=(OCR0/100)+0x30;
 17e:	4b 9d       	mul	r20, r11
 180:	41 2d       	mov	r20, r1
 182:	11 24       	eor	r1, r1
 184:	42 95       	swap	r20
 186:	4f 70       	andi	r20, 0x0F	; 15
 188:	40 5d       	subi	r20, 0xD0	; 208
			b=((OCR0/10)%10)+0x30;
			c=(OCR0%10)+0x30;
			
			LCD_DispCharXY(2,2,a);
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	24 d1       	rcall	.+584    	; 0x3d8 <LCD_DispCharXY>
			OCR0 = i;
			Segment_DisplayDigit(3,OCR0%10);
			Segment_DisplayDigit(2,(OCR0/10)%10);
			Segment_DisplayDigit(1,OCR0/100);
			a=(OCR0/100)+0x30;
			b=((OCR0/10)%10)+0x30;
 190:	ad 9c       	mul	r10, r13
 192:	81 2d       	mov	r24, r1
 194:	11 24       	eor	r1, r1
 196:	86 95       	lsr	r24
 198:	86 95       	lsr	r24
 19a:	86 95       	lsr	r24
 19c:	8d 9d       	mul	r24, r13
 19e:	91 2d       	mov	r25, r1
 1a0:	11 24       	eor	r1, r1
 1a2:	96 95       	lsr	r25
 1a4:	96 95       	lsr	r25
 1a6:	96 95       	lsr	r25
 1a8:	99 0f       	add	r25, r25
 1aa:	29 2f       	mov	r18, r25
 1ac:	22 0f       	add	r18, r18
 1ae:	22 0f       	add	r18, r18
 1b0:	92 0f       	add	r25, r18
 1b2:	89 1b       	sub	r24, r25
 1b4:	48 2f       	mov	r20, r24
 1b6:	40 5d       	subi	r20, 0xD0	; 208
			c=(OCR0%10)+0x30;
			
			LCD_DispCharXY(2,2,a);
			LCD_DispCharXY(2,3,b);
 1b8:	63 e0       	ldi	r22, 0x03	; 3
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	0d d1       	rcall	.+538    	; 0x3d8 <LCD_DispCharXY>
			Segment_DisplayDigit(3,OCR0%10);
			Segment_DisplayDigit(2,(OCR0/10)%10);
			Segment_DisplayDigit(1,OCR0/100);
			a=(OCR0/100)+0x30;
			b=((OCR0/10)%10)+0x30;
			c=(OCR0%10)+0x30;
 1be:	cd 9c       	mul	r12, r13
 1c0:	81 2d       	mov	r24, r1
 1c2:	11 24       	eor	r1, r1
 1c4:	86 95       	lsr	r24
 1c6:	86 95       	lsr	r24
 1c8:	86 95       	lsr	r24
 1ca:	88 0f       	add	r24, r24
 1cc:	98 2f       	mov	r25, r24
 1ce:	99 0f       	add	r25, r25
 1d0:	99 0f       	add	r25, r25
 1d2:	89 0f       	add	r24, r25
 1d4:	4c 2d       	mov	r20, r12
 1d6:	48 1b       	sub	r20, r24
 1d8:	40 5d       	subi	r20, 0xD0	; 208
			
			LCD_DispCharXY(2,2,a);
			LCD_DispCharXY(2,3,b);
			LCD_DispCharXY(2,4,c);
 1da:	64 e0       	ldi	r22, 0x04	; 4
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	fc d0       	rcall	.+504    	; 0x3d8 <LCD_DispCharXY>
	char c;
	LCD_DispStringXY(1,1,"Intensity is:");
	
	while(1)
	{
		for(int i=0;i<256;i++){
 1e0:	21 96       	adiw	r28, 0x01	; 1
 1e2:	cf 3f       	cpi	r28, 0xFF	; 255
 1e4:	d1 05       	cpc	r29, r1
 1e6:	09 f0       	breq	.+2      	; 0x1ea <main+0x122>
 1e8:	0c f4       	brge	.+2      	; 0x1ec <main+0x124>
 1ea:	99 cf       	rjmp	.-206    	; 0x11e <main+0x56>
 1ec:	e8 01       	movw	r28, r16
			LCD_DispCharXY(2,4,c);
			
		}

		for(int i=256;i>0;i--){
			OCR0 = i;
 1ee:	c1 bf       	out	0x31, r28	; 49
			Segment_DisplayDigit(3,OCR0%10);
 1f0:	61 b7       	in	r22, 0x31	; 49
 1f2:	6d 9d       	mul	r22, r13
 1f4:	81 2d       	mov	r24, r1
 1f6:	11 24       	eor	r1, r1
 1f8:	86 95       	lsr	r24
 1fa:	86 95       	lsr	r24
 1fc:	86 95       	lsr	r24
 1fe:	88 0f       	add	r24, r24
 200:	98 2f       	mov	r25, r24
 202:	99 0f       	add	r25, r25
 204:	99 0f       	add	r25, r25
 206:	89 0f       	add	r24, r25
 208:	68 1b       	sub	r22, r24
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	19 d1       	rcall	.+562    	; 0x440 <Segment_DisplayDigit>
			Segment_DisplayDigit(2,(OCR0/10)%10);
 20e:	61 b7       	in	r22, 0x31	; 49
 210:	6d 9d       	mul	r22, r13
 212:	61 2d       	mov	r22, r1
 214:	11 24       	eor	r1, r1
 216:	66 95       	lsr	r22
 218:	66 95       	lsr	r22
 21a:	66 95       	lsr	r22
 21c:	6d 9d       	mul	r22, r13
 21e:	81 2d       	mov	r24, r1
 220:	11 24       	eor	r1, r1
 222:	86 95       	lsr	r24
 224:	86 95       	lsr	r24
 226:	86 95       	lsr	r24
 228:	88 0f       	add	r24, r24
 22a:	98 2f       	mov	r25, r24
 22c:	99 0f       	add	r25, r25
 22e:	99 0f       	add	r25, r25
 230:	89 0f       	add	r24, r25
 232:	68 1b       	sub	r22, r24
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	04 d1       	rcall	.+520    	; 0x440 <Segment_DisplayDigit>
			Segment_DisplayDigit(1,OCR0/100);
 238:	61 b7       	in	r22, 0x31	; 49
 23a:	6b 9d       	mul	r22, r11
 23c:	61 2d       	mov	r22, r1
 23e:	11 24       	eor	r1, r1
 240:	62 95       	swap	r22
 242:	6f 70       	andi	r22, 0x0F	; 15
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	fc d0       	rcall	.+504    	; 0x440 <Segment_DisplayDigit>
			a=(OCR0/100)+0x30;
 248:	41 b7       	in	r20, 0x31	; 49
			b=((OCR0/10)%10)+0x30;
 24a:	a1 b6       	in	r10, 0x31	; 49
			c=(OCR0%10)+0x30;
 24c:	c1 b6       	in	r12, 0x31	; 49
		for(int i=256;i>0;i--){
			OCR0 = i;
			Segment_DisplayDigit(3,OCR0%10);
			Segment_DisplayDigit(2,(OCR0/10)%10);
			Segment_DisplayDigit(1,OCR0/100);
			a=(OCR0/100)+0x30;
 24e:	4b 9d       	mul	r20, r11
 250:	41 2d       	mov	r20, r1
 252:	11 24       	eor	r1, r1
 254:	42 95       	swap	r20
 256:	4f 70       	andi	r20, 0x0F	; 15
 258:	40 5d       	subi	r20, 0xD0	; 208
			b=((OCR0/10)%10)+0x30;
			c=(OCR0%10)+0x30;
			LCD_DispCharXY(2,2,a);
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	bc d0       	rcall	.+376    	; 0x3d8 <LCD_DispCharXY>
			OCR0 = i;
			Segment_DisplayDigit(3,OCR0%10);
			Segment_DisplayDigit(2,(OCR0/10)%10);
			Segment_DisplayDigit(1,OCR0/100);
			a=(OCR0/100)+0x30;
			b=((OCR0/10)%10)+0x30;
 260:	ad 9c       	mul	r10, r13
 262:	41 2d       	mov	r20, r1
 264:	11 24       	eor	r1, r1
 266:	46 95       	lsr	r20
 268:	46 95       	lsr	r20
 26a:	46 95       	lsr	r20
 26c:	4d 9d       	mul	r20, r13
 26e:	81 2d       	mov	r24, r1
 270:	11 24       	eor	r1, r1
 272:	86 95       	lsr	r24
 274:	86 95       	lsr	r24
 276:	86 95       	lsr	r24
 278:	88 0f       	add	r24, r24
 27a:	98 2f       	mov	r25, r24
 27c:	99 0f       	add	r25, r25
 27e:	99 0f       	add	r25, r25
 280:	89 0f       	add	r24, r25
 282:	48 1b       	sub	r20, r24
 284:	40 5d       	subi	r20, 0xD0	; 208
			c=(OCR0%10)+0x30;
			LCD_DispCharXY(2,2,a);
			LCD_DispCharXY(2,3,b);
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	a6 d0       	rcall	.+332    	; 0x3d8 <LCD_DispCharXY>
			Segment_DisplayDigit(3,OCR0%10);
			Segment_DisplayDigit(2,(OCR0/10)%10);
			Segment_DisplayDigit(1,OCR0/100);
			a=(OCR0/100)+0x30;
			b=((OCR0/10)%10)+0x30;
			c=(OCR0%10)+0x30;
 28c:	cd 9c       	mul	r12, r13
 28e:	81 2d       	mov	r24, r1
 290:	11 24       	eor	r1, r1
 292:	86 95       	lsr	r24
 294:	86 95       	lsr	r24
 296:	86 95       	lsr	r24
 298:	88 0f       	add	r24, r24
 29a:	98 2f       	mov	r25, r24
 29c:	99 0f       	add	r25, r25
 29e:	99 0f       	add	r25, r25
 2a0:	89 0f       	add	r24, r25
 2a2:	4c 2d       	mov	r20, r12
 2a4:	48 1b       	sub	r20, r24
 2a6:	40 5d       	subi	r20, 0xD0	; 208
			LCD_DispCharXY(2,2,a);
			LCD_DispCharXY(2,3,b);
			LCD_DispCharXY(2,4,c);
 2a8:	64 e0       	ldi	r22, 0x04	; 4
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	95 d0       	rcall	.+298    	; 0x3d8 <LCD_DispCharXY>
 2ae:	21 97       	sbiw	r28, 0x01	; 1
			LCD_DispCharXY(2,3,b);
			LCD_DispCharXY(2,4,c);
			
		}

		for(int i=256;i>0;i--){
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <main+0x1ec>
 2b2:	9d cf       	rjmp	.-198    	; 0x1ee <main+0x126>
	char c;
	LCD_DispStringXY(1,1,"Intensity is:");
	
	while(1)
	{
		for(int i=0;i<256;i++){
 2b4:	e7 01       	movw	r28, r14
 2b6:	95 cf       	rjmp	.-214    	; 0x1e2 <main+0x11a>

000002b8 <LCD_DispChar>:
	    _delay_us(40);
}

void LCD_ClearAll(void)
{
	LCD_SendCmd(0x01);
 2b8:	c5 9a       	sbi	0x18, 5	; 24
 2ba:	c6 98       	cbi	0x18, 6	; 24
 2bc:	88 23       	and	r24, r24
 2be:	14 f4       	brge	.+4      	; 0x2c4 <LCD_DispChar+0xc>
 2c0:	af 9a       	sbi	0x15, 7	; 21
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <LCD_DispChar+0xe>
 2c4:	af 98       	cbi	0x15, 7	; 21
 2c6:	86 ff       	sbrs	r24, 6
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <LCD_DispChar+0x16>
 2ca:	ae 9a       	sbi	0x15, 6	; 21
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <LCD_DispChar+0x18>
 2ce:	ae 98       	cbi	0x15, 6	; 21
 2d0:	85 ff       	sbrs	r24, 5
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <LCD_DispChar+0x20>
 2d4:	ad 9a       	sbi	0x15, 5	; 21
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <LCD_DispChar+0x22>
 2d8:	ad 98       	cbi	0x15, 5	; 21
 2da:	84 ff       	sbrs	r24, 4
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <LCD_DispChar+0x2a>
 2de:	ac 9a       	sbi	0x15, 4	; 21
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <LCD_DispChar+0x2c>
 2e2:	ac 98       	cbi	0x15, 4	; 21
 2e4:	c7 9a       	sbi	0x18, 7	; 24
 2e6:	c7 98       	cbi	0x18, 7	; 24
 2e8:	83 ff       	sbrs	r24, 3
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <LCD_DispChar+0x38>
 2ec:	af 9a       	sbi	0x15, 7	; 21
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <LCD_DispChar+0x3a>
 2f0:	af 98       	cbi	0x15, 7	; 21
 2f2:	82 ff       	sbrs	r24, 2
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <LCD_DispChar+0x42>
 2f6:	ae 9a       	sbi	0x15, 6	; 21
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <LCD_DispChar+0x44>
 2fa:	ae 98       	cbi	0x15, 6	; 21
 2fc:	81 ff       	sbrs	r24, 1
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <LCD_DispChar+0x4c>
 300:	ad 9a       	sbi	0x15, 5	; 21
 302:	01 c0       	rjmp	.+2      	; 0x306 <LCD_DispChar+0x4e>
 304:	ad 98       	cbi	0x15, 5	; 21
 306:	80 ff       	sbrs	r24, 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <LCD_DispChar+0x56>
 30a:	ac 9a       	sbi	0x15, 4	; 21
 30c:	01 c0       	rjmp	.+2      	; 0x310 <LCD_DispChar+0x58>
 30e:	ac 98       	cbi	0x15, 4	; 21
 310:	c7 9a       	sbi	0x18, 7	; 24
 312:	c7 98       	cbi	0x18, 7	; 24
 314:	8a e6       	ldi	r24, 0x6A	; 106
 316:	8a 95       	dec	r24
 318:	f1 f7       	brne	.-4      	; 0x316 <LCD_DispChar+0x5e>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <LCD_DispChar+0x64>
 31c:	08 95       	ret

0000031e <LCD_SendCmd>:
 31e:	c5 98       	cbi	0x18, 5	; 24
 320:	c6 98       	cbi	0x18, 6	; 24
 322:	88 23       	and	r24, r24
 324:	14 f4       	brge	.+4      	; 0x32a <LCD_SendCmd+0xc>
 326:	af 9a       	sbi	0x15, 7	; 21
 328:	01 c0       	rjmp	.+2      	; 0x32c <LCD_SendCmd+0xe>
 32a:	af 98       	cbi	0x15, 7	; 21
 32c:	86 ff       	sbrs	r24, 6
 32e:	02 c0       	rjmp	.+4      	; 0x334 <LCD_SendCmd+0x16>
 330:	ae 9a       	sbi	0x15, 6	; 21
 332:	01 c0       	rjmp	.+2      	; 0x336 <LCD_SendCmd+0x18>
 334:	ae 98       	cbi	0x15, 6	; 21
 336:	85 ff       	sbrs	r24, 5
 338:	02 c0       	rjmp	.+4      	; 0x33e <LCD_SendCmd+0x20>
 33a:	ad 9a       	sbi	0x15, 5	; 21
 33c:	01 c0       	rjmp	.+2      	; 0x340 <LCD_SendCmd+0x22>
 33e:	ad 98       	cbi	0x15, 5	; 21
 340:	84 ff       	sbrs	r24, 4
 342:	02 c0       	rjmp	.+4      	; 0x348 <LCD_SendCmd+0x2a>
 344:	ac 9a       	sbi	0x15, 4	; 21
 346:	01 c0       	rjmp	.+2      	; 0x34a <LCD_SendCmd+0x2c>
 348:	ac 98       	cbi	0x15, 4	; 21
 34a:	c7 9a       	sbi	0x18, 7	; 24
 34c:	c7 98       	cbi	0x18, 7	; 24
 34e:	83 ff       	sbrs	r24, 3
 350:	02 c0       	rjmp	.+4      	; 0x356 <LCD_SendCmd+0x38>
 352:	af 9a       	sbi	0x15, 7	; 21
 354:	01 c0       	rjmp	.+2      	; 0x358 <LCD_SendCmd+0x3a>
 356:	af 98       	cbi	0x15, 7	; 21
 358:	82 ff       	sbrs	r24, 2
 35a:	02 c0       	rjmp	.+4      	; 0x360 <LCD_SendCmd+0x42>
 35c:	ae 9a       	sbi	0x15, 6	; 21
 35e:	01 c0       	rjmp	.+2      	; 0x362 <LCD_SendCmd+0x44>
 360:	ae 98       	cbi	0x15, 6	; 21
 362:	81 ff       	sbrs	r24, 1
 364:	02 c0       	rjmp	.+4      	; 0x36a <LCD_SendCmd+0x4c>
 366:	ad 9a       	sbi	0x15, 5	; 21
 368:	01 c0       	rjmp	.+2      	; 0x36c <LCD_SendCmd+0x4e>
 36a:	ad 98       	cbi	0x15, 5	; 21
 36c:	80 ff       	sbrs	r24, 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <LCD_SendCmd+0x56>
 370:	ac 9a       	sbi	0x15, 4	; 21
 372:	01 c0       	rjmp	.+2      	; 0x376 <LCD_SendCmd+0x58>
 374:	ac 98       	cbi	0x15, 4	; 21
 376:	c7 9a       	sbi	0x18, 7	; 24
 378:	c7 98       	cbi	0x18, 7	; 24
 37a:	8a e6       	ldi	r24, 0x6A	; 106
 37c:	8a 95       	dec	r24
 37e:	f1 f7       	brne	.-4      	; 0x37c <LCD_SendCmd+0x5e>
 380:	00 c0       	rjmp	.+0      	; 0x382 <LCD_SendCmd+0x64>
 382:	08 95       	ret

00000384 <LCD_Init>:
 384:	84 b3       	in	r24, 0x14	; 20
 386:	80 6f       	ori	r24, 0xF0	; 240
 388:	84 bb       	out	0x14, r24	; 20
 38a:	85 b3       	in	r24, 0x15	; 21
 38c:	8f 70       	andi	r24, 0x0F	; 15
 38e:	85 bb       	out	0x15, r24	; 21
 390:	87 b3       	in	r24, 0x17	; 23
 392:	80 6e       	ori	r24, 0xE0	; 224
 394:	87 bb       	out	0x17, r24	; 23
 396:	88 b3       	in	r24, 0x18	; 24
 398:	8f 71       	andi	r24, 0x1F	; 31
 39a:	88 bb       	out	0x18, r24	; 24
 39c:	8f e3       	ldi	r24, 0x3F	; 63
 39e:	9c e9       	ldi	r25, 0x9C	; 156
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCD_Init+0x1c>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCD_Init+0x22>
 3a6:	00 00       	nop
 3a8:	88 e2       	ldi	r24, 0x28	; 40
 3aa:	b9 df       	rcall	.-142    	; 0x31e <LCD_SendCmd>
 3ac:	8c e0       	ldi	r24, 0x0C	; 12
 3ae:	b7 df       	rcall	.-146    	; 0x31e <LCD_SendCmd>
 3b0:	86 e0       	ldi	r24, 0x06	; 6
 3b2:	b5 df       	rcall	.-150    	; 0x31e <LCD_SendCmd>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	b3 df       	rcall	.-154    	; 0x31e <LCD_SendCmd>
 3b8:	8f e0       	ldi	r24, 0x0F	; 15
 3ba:	97 e2       	ldi	r25, 0x27	; 39
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCD_Init+0x38>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <LCD_Init+0x3e>
 3c2:	00 00       	nop
 3c4:	08 95       	ret

000003c6 <LCD_GotoXY>:
/* Pos, Line */
/* Line: 1/2 */
/* Pos: 0/15 */
void LCD_GotoXY(unsigned char x, unsigned char y)
{
	if(y == 1)
 3c6:	61 30       	cpi	r22, 0x01	; 1
 3c8:	11 f4       	brne	.+4      	; 0x3ce <LCD_GotoXY+0x8>
	{
		//LCD RAM address for the 1st line: 0x80
		LCD_SendCmd(0x80 + x);
 3ca:	80 58       	subi	r24, 0x80	; 128
 3cc:	a8 cf       	rjmp	.-176    	; 0x31e <LCD_SendCmd>
	}
	else if( y == 2)
 3ce:	62 30       	cpi	r22, 0x02	; 2
 3d0:	11 f4       	brne	.+4      	; 0x3d6 <LCD_GotoXY+0x10>
	{
		//LCD RAM address for the 2nd line: 0xC0
		LCD_SendCmd(0xC0 + x);
 3d2:	80 54       	subi	r24, 0x40	; 64
 3d4:	a4 cf       	rjmp	.-184    	; 0x31e <LCD_SendCmd>
 3d6:	08 95       	ret

000003d8 <LCD_DispCharXY>:
	setEN();
	clearEN();
	_delay_us(40);
}
void LCD_DispCharXY(unsigned char x, unsigned char y,unsigned char data)
{
 3d8:	cf 93       	push	r28
 3da:	c4 2f       	mov	r28, r20
	LCD_GotoXY(x,y);
 3dc:	f4 df       	rcall	.-24     	; 0x3c6 <LCD_GotoXY>
	LCD_DispChar(data);
 3de:	8c 2f       	mov	r24, r28
 3e0:	6b df       	rcall	.-298    	; 0x2b8 <LCD_DispChar>
}
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <LCD_DispString>:
{
	LCD_GotoXY(x,y);
	LCD_DispString(str);
}
void LCD_DispString(unsigned char *str)
{
 3e6:	1f 93       	push	r17
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	ec 01       	movw	r28, r24
	unsigned char count = 0;
	while(str[count] != '\0')
 3ee:	88 81       	ld	r24, Y
 3f0:	88 23       	and	r24, r24
 3f2:	49 f0       	breq	.+18     	; 0x406 <LCD_DispString+0x20>
	LCD_GotoXY(x,y);
	LCD_DispString(str);
}
void LCD_DispString(unsigned char *str)
{
	unsigned char count = 0;
 3f4:	10 e0       	ldi	r17, 0x00	; 0
	while(str[count] != '\0')
		LCD_DispChar(str[count++]);
 3f6:	1f 5f       	subi	r17, 0xFF	; 255
 3f8:	5f df       	rcall	.-322    	; 0x2b8 <LCD_DispChar>
	LCD_DispString(str);
}
void LCD_DispString(unsigned char *str)
{
	unsigned char count = 0;
	while(str[count] != '\0')
 3fa:	fe 01       	movw	r30, r28
 3fc:	e1 0f       	add	r30, r17
 3fe:	f1 1d       	adc	r31, r1
 400:	80 81       	ld	r24, Z
 402:	81 11       	cpse	r24, r1
 404:	f8 cf       	rjmp	.-16     	; 0x3f6 <LCD_DispString+0x10>
		LCD_DispChar(str[count++]);
}
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	08 95       	ret

0000040e <LCD_DispStringXY>:
		//LCD RAM address for the 2nd line: 0xC0
		LCD_SendCmd(0xC0 + x);
	}
}
void LCD_DispStringXY(unsigned char x, unsigned char y,unsigned char *str)
{
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	ea 01       	movw	r28, r20
	LCD_GotoXY(x,y);
 414:	d8 df       	rcall	.-80     	; 0x3c6 <LCD_GotoXY>
	LCD_DispString(str);
 416:	ce 01       	movw	r24, r28
 418:	e6 df       	rcall	.-52     	; 0x3e6 <LCD_DispString>
}
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <Segment_Init>:
﻿#include "Segment.h"

void Segment_Init(void){
	/* Setup DigitPos */
	POS_PORT_DDR = 0xFF;
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	8a bb       	out	0x1a, r24	; 26
	POS_PORT	 = 0xff;
 424:	8b bb       	out	0x1b, r24	; 27
	/* Setup DigitData */
	DATA_PORT_DDR = 0xff;
 426:	84 bb       	out	0x14, r24	; 20
	DATA_PORT	  = 0x00;
 428:	15 ba       	out	0x15, r1	; 21
	/* Enable Segments */
	SET_SEG1_DDR;
 42a:	e1 e6       	ldi	r30, 0x61	; 97
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	84 60       	ori	r24, 0x04	; 4
 432:	80 83       	st	Z, r24
	ENABLE_SEG1;
 434:	e2 e6       	ldi	r30, 0x62	; 98
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	8b 7f       	andi	r24, 0xFB	; 251
 43c:	80 83       	st	Z, r24
 43e:	08 95       	ret

00000440 <Segment_DisplayDigit>:
	//SET_SEG2_DDR;
	//ENABLE_SEG2;
}
void Segment_DisplayDigit(unsigned char digitPos,unsigned char digitValue){
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
 448:	2b 97       	sbiw	r28, 0x0b	; 11
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	de bf       	out	0x3e, r29	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	cd bf       	out	0x3d, r28	; 61
	unsigned char numbers[]= {ZERO, ONE, TWO, THREE, FOUR, FIVE\
 454:	9b e0       	ldi	r25, 0x0B	; 11
 456:	e0 e0       	ldi	r30, 0x00	; 0
 458:	f1 e0       	ldi	r31, 0x01	; 1
 45a:	de 01       	movw	r26, r28
 45c:	11 96       	adiw	r26, 0x01	; 1
 45e:	01 90       	ld	r0, Z+
 460:	0d 92       	st	X+, r0
 462:	9a 95       	dec	r25
 464:	e1 f7       	brne	.-8      	; 0x45e <Segment_DisplayDigit+0x1e>
	,SIX, SEVEN, EIGHT, NINE,DOT};
	
	POS_PORT = ~(1<<(digitPos-1));
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	a9 01       	movw	r20, r18
 470:	02 c0       	rjmp	.+4      	; 0x476 <Segment_DisplayDigit+0x36>
 472:	44 0f       	add	r20, r20
 474:	55 1f       	adc	r21, r21
 476:	8a 95       	dec	r24
 478:	e2 f7       	brpl	.-8      	; 0x472 <Segment_DisplayDigit+0x32>
 47a:	ca 01       	movw	r24, r20
 47c:	80 95       	com	r24
 47e:	8b bb       	out	0x1b, r24	; 27
	
	if(digitValue == '.')
 480:	6e 32       	cpi	r22, 0x2E	; 46
 482:	19 f4       	brne	.+6      	; 0x48a <Segment_DisplayDigit+0x4a>
	DATA_PORT = numbers[10];
 484:	8b 85       	ldd	r24, Y+11	; 0x0b
 486:	85 bb       	out	0x15, r24	; 21
 488:	05 c0       	rjmp	.+10     	; 0x494 <Segment_DisplayDigit+0x54>
	else
	DATA_PORT = numbers[digitValue];
 48a:	fe 01       	movw	r30, r28
 48c:	e6 0f       	add	r30, r22
 48e:	f1 1d       	adc	r31, r1
 490:	81 81       	ldd	r24, Z+1	; 0x01
 492:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 494:	8f e1       	ldi	r24, 0x1F	; 31
 496:	9e e4       	ldi	r25, 0x4E	; 78
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <Segment_DisplayDigit+0x58>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <Segment_DisplayDigit+0x5e>
 49e:	00 00       	nop
	
	_delay_ms(10);
	
	POS_PORT = 0xff;
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	8b bb       	out	0x1b, r24	; 27
 4a4:	2b 96       	adiw	r28, 0x0b	; 11
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	f8 94       	cli
 4aa:	de bf       	out	0x3e, r29	; 62
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	cd bf       	out	0x3d, r28	; 61
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <_exit>:
 4b6:	f8 94       	cli

000004b8 <__stop_program>:
 4b8:	ff cf       	rjmp	.-2      	; 0x4b8 <__stop_program>
