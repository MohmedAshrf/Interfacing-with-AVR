
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000106  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008df  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001d8  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000159  00000000  00000000  00000b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000213  00000000  00000000  00000c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000106  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	11 d0       	rcall	.+34     	; 0xbc <main>
  9a:	33 c0       	rjmp	.+102    	; 0x102 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <EEPROM_read>:
    }
}
unsigned char EEPROM_read(unsigned int uiAddress)
{
	
	while(EECR & (1<<EEWE));//EEWE: Write Enable
  9e:	e1 99       	sbic	0x1c, 1	; 28
  a0:	fe cf       	rjmp	.-4      	; 0x9e <EEPROM_read>
	//EECR : Control Register
	EEAR = uiAddress;
  a2:	9f bb       	out	0x1f, r25	; 31
  a4:	8e bb       	out	0x1e, r24	; 30
	
	EECR |= (1<<EERE); //EERE : Read Enable
  a6:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR; //EEDR : Data Register
  a8:	8d b3       	in	r24, 0x1d	; 29
}
  aa:	08 95       	ret

000000ac <EEPROM_write>:
void
 EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{

while(EECR & (1<<EEWE));
  ac:	e1 99       	sbic	0x1c, 1	; 28
  ae:	fe cf       	rjmp	.-4      	; 0xac <EEPROM_write>
EEAR = uiAddress;
  b0:	9f bb       	out	0x1f, r25	; 31
  b2:	8e bb       	out	0x1e, r24	; 30
EEDR = ucData;
  b4:	6d bb       	out	0x1d, r22	; 29
/* 
Write logical one to EEMWE */
EECR |= (1<<EEMWE);
  b6:	e2 9a       	sbi	0x1c, 2	; 28
/* Start eeprom write by setting EEWE */
EECR |= (1<<EEWE);
  b8:	e1 9a       	sbi	0x1c, 1	; 28
  ba:	08 95       	ret

000000bc <main>:
#include <util/delay.h>
unsigned char EEPROM_read(unsigned int uiAddress);
 void EEPROM_write(unsigned int uiAddress, unsigned char ucData);
int main(void)
{
	DDRF |= (1<<PF1);
  bc:	e1 e6       	ldi	r30, 0x61	; 97
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	80 83       	st	Z, r24
	PORTF |= (1<<PF1);
  c6:	e2 e6       	ldi	r30, 0x62	; 98
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	80 83       	st	Z, r24
	DDRA |= 0XFF;
  d0:	8a b3       	in	r24, 0x1a	; 26
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a bb       	out	0x1a, r24	; 26

int Data;
	Data= EEPROM_read(0x0000);
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	e1 df       	rcall	.-62     	; 0x9e <EEPROM_read>
	PORTA = Data;
  dc:	8b bb       	out	0x1b, r24	; 27
  de:	c8 2f       	mov	r28, r24
  e0:	cf 5f       	subi	r28, 0xFF	; 255
    while(1)
    {
		Data++;
	PORTA = Data;
  e2:	cb bb       	out	0x1b, r28	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	89 e6       	ldi	r24, 0x69	; 105
  e8:	98 e1       	ldi	r25, 0x18	; 24
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x2e>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x38>
  f4:	00 00       	nop
	_delay_ms(1000);
		EEPROM_write(0x0000,Data);
  f6:	6c 2f       	mov	r22, r28
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	d7 df       	rcall	.-82     	; 0xac <EEPROM_write>
  fe:	cf 5f       	subi	r28, 0xFF	; 255
 100:	f0 cf       	rjmp	.-32     	; 0xe2 <main+0x26>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
